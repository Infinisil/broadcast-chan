Name:                broadcast-chan
Version:             0.1.1

Homepage:            https://github.com/merijn/broadcast-chan
Bug-Reports:         https://github.com/merijn/broadcast-chan/issues

Author:              Merijn Verstraaten
Maintainer:          Merijn Verstraaten <merijn@inconsistent.nl>
Copyright:           Copyright Â© 2014 Merijn Verstraaten

License:             BSD3
License-File:        LICENSE

Category:            System
Cabal-Version:       >= 1.10
Build-Type:          Simple
Tested-With:         GHC == 7.8.3

Synopsis:            Broadcast channel type that avoids 0 reader space leaks.

Description:
    A variation of "Control.Concurrent.Chan" from base, which allows to the
    easy creation of broadcast channels without the space-leaks that may arise
    from using 'Control.Concurrent.Chan.dupChan'.

    The 'Control.Concurrent.Chan.Chan' type from "Control.Concurrent.Chan"
    consists of both a read and write end. This presents a problem when one
    wants to have a broadcast channel that, at times, has zero listeners. To
    write to a 'Control.Concurrent.Chan.Chan' there must always be a read end
    and this read end will hold ALL messages alive until read.

    The simple solution applied in this module is to separate read and write
    ends. As a result, any messages written to the write end can be immediately
    garbage collected if there are no active read ends, avoding space leaks.

Flag benchmark
  Description:        Benchmarks depend on an unreleased version of
                      Criterion, making them unbuildable without sanboxes.
  Default:            False
  Manual:             True

Flag sync
  Description:        Benchmarks synchronisation primitives used in main
                      benchmark.
  Default:            False
  Manual:             True

Flag threaded
  Description:        Run benchmarks with threaded backend.
  Default:            True
  Manual:             True

Library
  Default-Language:     Haskell2010
  GHC-Options:          -Wall -O2 -fno-warn-unused-do-bind
  Exposed-Modules:      BroadcastChan
                        BroadcastChan.Throw

  Other-Extensions:     AutoDeriveTypeable
                        DataKinds
                        DeriveGeneric
                        KindSignatures
                        Safe

  Build-Depends:        base >= 4.5 && < 5

Benchmark sync
  Default-Language:     Haskell2010
  Type:                 exitcode-stdio-1.0
  Main-Is:              Sync.hs
  GHC-Options:          -Wall -O2 -Wno-orphans
  if flag(threaded)
    GHC-Options:        -threaded
  Hs-Source-Dirs:       benchmarks

  Other-Extensions:     BangPatterns

  if flag(benchmark) && flag(sync)
    Buildable:          True
  else
    Buildable:          False

  Build-Depends:        base
               ,        async
               ,        atomic-primops
               ,        criterion
               ,        containers
               ,        deepseq
               ,        stm

Benchmark channels
  Default-Language:     Haskell2010
  Type:                 exitcode-stdio-1.0
  Main-Is:              Channels.hs
  GHC-Options:          -Wall -O2 -Wno-orphans -fno-warn-unused-do-bind
  if flag(threaded)
    GHC-Options:        -threaded
  Hs-Source-Dirs:       benchmarks

  Other-Extensions:     BangPatterns
                        DeriveAnyClass
                        DeriveGeneric
                        NumDecimals
                        RecordWildCards

  if flag(benchmark)
    Buildable:          True
  else
    Buildable:          False

  Build-Depends:        base
               ,        async
               ,        broadcast-chan
               ,        criterion
               ,        deepseq
               ,        stm

Source-Repository head
  Type:     git
  Location: ssh://github.com:merijn/broadcast-chan.git

Source-Repository head
  Type:     mercurial
  Location: https://bitbucket.org/merijnv/broadcast-chan
